local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local function GetPlayer(Name)
	Name = Name:lower()
	for _, x in next, Players:GetPlayers() do
		if x ~= Player then
			if x.Name:lower():match("^" .. Name) or x.DisplayName:lower():match("^" .. Name) then
				return x
			end
		end
	end
	return nil
end

local function Message(_Title, _Text, Time)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = _Title,
		Text = _Text,
		Duration = Time
	})
end

local function SkidFling(TargetPlayer)
	local Character = Player.Character
	local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
	local RootPart = Humanoid and Humanoid.RootPart
	local TCharacter = TargetPlayer.Character
	local THumanoid = TCharacter and TCharacter:FindFirstChildOfClass("Humanoid")
	local TRootPart = THumanoid and THumanoid.RootPart
	local THead = TCharacter and TCharacter:FindFirstChild("Head")
	local Accessory = TCharacter and TCharacter:FindFirstChildOfClass("Accessory")
	local Handle = Accessory and Accessory:FindFirstChild("Handle")

	if Character and Humanoid and RootPart then
		if RootPart.Velocity.Magnitude < 50 then
			getgenv().OldPos = RootPart.CFrame
		end

		if THumanoid and THumanoid.Sit then
			return Message("Error Occurred", "Target is sitting", 5)
		end

		workspace.CurrentCamera.CameraSubject = THead or Handle or THumanoid

		if not TCharacter:FindFirstChildWhichIsA("BasePart") then return end

		local function FPos(BasePart, Pos, Ang)
			RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
			Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
			RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
			RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
		end

		local function SFBasePart(BasePart)
			local TimeToWait = 2
			local Time = tick()
			local Angle = 0
			repeat
				if RootPart and THumanoid then
					if BasePart.Velocity.Magnitude < 50 then
						Angle = Angle + 100
						for _, offset in ipairs({
							Vector3.new(0, 1.5, 0),
							Vector3.new(0, -1.5, 0),
							Vector3.new(2.25, 1.5, -2.25),
							Vector3.new(-2.25, -1.5, 2.25),
							Vector3.new(0, 1.5, 0),
							Vector3.new(0, -1.5, 0),
						}) do
							FPos(BasePart, CFrame.new(offset) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
							task.wait()
						end
					else
						for _, mag in ipairs({
							THumanoid.WalkSpeed,
							-THumanoid.WalkSpeed,
							TRootPart.Velocity.Magnitude / 1.25,
							-TRootPart.Velocity.Magnitude / 1.25,
							TRootPart.Velocity.Magnitude / 1.25
						}) do
							FPos(BasePart, CFrame.new(0, 1.5, mag), CFrame.Angles(math.rad(90), 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, -1.5, mag), CFrame.Angles(0, 0, 0))
							task.wait()
						end
						FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
						task.wait()
					end
				else
					break
				end
			until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
		end

		workspace.FallenPartsDestroyHeight = 0/0

		local BV = Instance.new("BodyVelocity")
		BV.Name = "EpixVel"
		BV.Parent = RootPart
		BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
		BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)

		Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)

		if TRootPart and THead then
			if (TRootPart.Position - THead.Position).Magnitude > 5 then
				SFBasePart(THead)
			else
				SFBasePart(TRootPart)
			end
		elseif TRootPart then
			SFBasePart(TRootPart)
		elseif THead then
			SFBasePart(THead)
		elseif Handle then
			SFBasePart(Handle)
		else
			return Message("Error Occurred", "Target is missing everything", 5)
		end

		BV:Destroy()
		Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
		workspace.CurrentCamera.CameraSubject = Humanoid

		repeat
			RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
			Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
			Humanoid:ChangeState("GettingUp")
			for _, x in ipairs(Character:GetChildren()) do
				if x:IsA("BasePart") then
					x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
				end
			end
			task.wait()
		until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25

		workspace.FallenPartsDestroyHeight = getgenv().FPDH
	else
		return Message("Error Occurred", "Random error", 5)
	end
end
